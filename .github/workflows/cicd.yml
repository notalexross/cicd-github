# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: CICD
on:
  workflow_call:
    inputs:
      # Note: If repository supplied, default hash_filename & badge_filename_template values will still use the calling repo ID and NOT the ID of the checked out repo.
      repository:
        type: string
        required: false
      ref:
        # Branch, tag, or SHA to checkout
        type: string
        required: false
      build_path:
        type: string
        required: false
        default: build
      force_deploy:
        type: boolean
        required: false
        default: false
      production:
        type: boolean
        required: false
        default: true
      deploy_message:
        # {0}: commit_hash
        # {1}: commit_hash_short
        type: string
        required: false
        default: Via GitHub
      hash_filename:
        type: string
        required: false
        default: hash
      badge_filename_template:
        type: string
        required: false
        default: badge__{0}.json
    secrets:
      GIST_AUTH_TOKEN:
        required: true
      BADGES_GIST_ID:
        required: true
      NETLIFY_AUTH_TOKEN:
        required: true
      NETLIFY_SITE_ID:
        required: true
      ENV:
        required: false
      REPO_AUTH_TOKEN:
        required: false
jobs:
  preprocess:
    runs-on: ubuntu-latest
    outputs:
      head_matches_origin: ${{ steps.git.outputs.head_matches_origin }}
      commit_hash: ${{ steps.git.outputs.commit_hash }}
      commit_hash_short: ${{ steps.git.outputs.commit_hash_short }}
    steps:
      - uses: notalexross/cicd-github/actions/require-inputs@main
        with:
          every: >
            build_path ${{ toJSON(inputs.build_path) }}
            force_deploy ${{ toJSON(inputs.force_deploy) }}
            hash_filename ${{ toJSON(inputs.hash_filename) }}
            badge_filename_template ${{ toJSON(inputs.badge_filename_template) }}
            production ${{ toJSON(inputs.production) }}
            GIST_AUTH_TOKEN ${{ toJSON(secrets.GIST_AUTH_TOKEN) }}
            BADGES_GIST_ID ${{ toJSON(secrets.BADGES_GIST_ID) }}
            NETLIFY_AUTH_TOKEN ${{ toJSON(secrets.NETLIFY_AUTH_TOKEN) }}
            NETLIFY_SITE_ID ${{ toJSON(secrets.NETLIFY_SITE_ID) }}
      - if: ${{ !!inputs.repository }}
        run: |
          if [[ "${{ secrets.REPO_AUTH_TOKEN }}" == "" ]]; then
            echo "::error::Must specify REPO_AUTH_TOKEN when repository supplied"
            exit 11
          fi
      - if: ${{ !!inputs.repository }}
        uses: actions/checkout@v2
        with:
          repository: ${{ inputs.repository }}
          token: ${{ secrets.REPO_AUTH_TOKEN }}
          ref: ${{ inputs.ref }}
      - if: ${{ !inputs.repository }}
        uses: actions/checkout@v2
        with:
          ref: ${{ inputs.ref }}
      - id: git
        run: |
          origin=$(git remote show origin | sed -n -e 's/^  HEAD branch: //p')
          head=$(git branch | sed -n -e 's/^* //p')
          commit_hash=$(git log --pretty=format:'%H' -1)
          echo commit: $commit_hash
          if [[ $head == $origin ]]; then
            echo "HEAD matches origin. Current: $head."
            echo "::set-output name=head_matches_origin::true"
          else
            echo "HEAD is different from origin. Current: $head, origin: $origin."
            echo "::set-output name=head_matches_origin::false"
          fi
          echo "::set-output name=commit_hash::$commit_hash"
          echo "::set-output name=commit_hash_short::${commit_hash::7}"
  build:
    needs: preprocess
    runs-on: ubuntu-latest
    outputs:
      test_results: ${{ steps.build.outputs.test_results }}
      lint_status: ${{ steps.build.outputs.lint_status }}
      hash: ${{ steps.compare_hash.outputs.hash }}
      hashes_match: ${{ steps.compare_hash.outputs.match }}
    steps:
      - if: ${{ !!inputs.repository }}
        uses: actions/checkout@v2
        with:
          repository: ${{ inputs.repository }}
          token: ${{ secrets.REPO_AUTH_TOKEN }}
          ref: ${{ inputs.ref }}
      - if: ${{ !inputs.repository }}
        uses: actions/checkout@v2
        with:
          ref: ${{ inputs.ref }}
      - id: build
        uses: notalexross/cicd-github/actions/build/npm@main
        with:
          env: ${{ secrets.ENV }}
      - id: get_stored_hash
        uses: notalexross/cicd-github/actions/gist@main
        with:
          gist_token: ${{ secrets.GIST_AUTH_TOKEN }}
          gist_id: ${{ secrets.BADGES_GIST_ID }}
          method: GET
          filename: ${{ inputs.hash_filename }}
      - id: compare_hash
        shell: bash
        run: |
          hash=${{ hashFiles(inputs.build_path) }}
          if [[ $hash == "" ]]; then
            echo "::error::No files present at \"${{ inputs.build_path }}\"."
            exit 11
          fi
          if [[ $hash == "${{ steps.get_stored_hash.outputs.content }}" ]]; then
            echo "Build hash matches stored version."
            echo "::set-output name=match::true"
          else
            echo "Build hash is different from stored version (or no stored version found)."
            echo "::set-output name=match::false"
          fi
          echo "::set-output name=hash::$hash"
      - if: ${{ inputs.force_deploy || steps.compare_hash.outputs.match == 'false' }}
        uses: actions/upload-artifact@v2
        with:
          name: build
          path: ${{ inputs.build_path }}
  deploy:
    needs:
      - preprocess
      - build
    if: ${{ inputs.force_deploy || needs.build.outputs.hashes_match == 'false' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: build
          path: ${{ inputs.build_path }}
      - uses: notalexross/cicd-github/actions/deploy/netlify@main
        with:
          netlify_token: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          site_id: ${{ secrets.NETLIFY_SITE_ID }}
          build_path: ${{ inputs.build_path }}
          production: ${{ inputs.production }}
          message: ${{ format(inputs.deploy_message, needs.preprocess.outputs.commit_hash, needs.preprocess.outputs.commit_hash_short) }}
      - uses: notalexross/cicd-github/actions/gist@main
        with:
          gist_token: ${{ secrets.GIST_AUTH_TOKEN }}
          gist_id: ${{ secrets.BADGES_GIST_ID }}
          method: POST
          filename: ${{ inputs.hash_filename }}
          content: ${{ needs.build.outputs.hash }}
  update_badges:
    needs:
      - preprocess
      - build
      - deploy
    if: ${{ always() && needs.preprocess.result == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - if: ${{ needs.preprocess.outputs.head_matches_origin == 'true' }}
        uses: notalexross/cicd-github/actions/update-badges@main
        with:
          gist_token: ${{ secrets.GIST_AUTH_TOKEN }}
          gist_id: ${{ secrets.BADGES_GIST_ID }}
          test_results: ${{ needs.build.outputs.test_results }}
          lint_status: ${{ needs.build.outputs.lint_status }}
          build_status: ${{ needs.build.result }}
          deploy_status: ${{ needs.deploy.result }}
          commit_hash: ${{ needs.preprocess.outputs.commit_hash_short }}
          filename_template: ${{ inputs.badge_filename_template }}
      - if: ${{ needs.preprocess.outputs.head_matches_origin == 'false' }}
        uses: notalexross/cicd-github/actions/update-badges@main
        with:
          gist_token: ${{ secrets.GIST_AUTH_TOKEN }}
          gist_id: ${{ secrets.BADGES_GIST_ID }}
          deploy_status: ${{ needs.deploy.result }}
          commit_hash: ${{ needs.preprocess.outputs.commit_hash_short }}
          filename_template: ${{ inputs.badge_filename_template }}
